idxrange.py
Incrementally computes the range of data in an idx volume.
-------------------------------------------------------------------------------

[] look for a bucket-o-threads container (or use visus' equivalent of the same if it has one)
[] vectorize the computation for it to be *much* faster (not sure how, but numpy seems able to do so)
[] handle ncomponents >1 cases (mostly there already)



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
old notes...

Tuesday, May 28, 2019
-----------------------------
Making progress.
[x] print("\tignoring because ncomponents is > 1")    # [x] test this (todo)
[x] get basic min/max checking working
[x] handle levels that would load too much data at full resolution
[x] try not changing functions to see if this is faster: global_calc_minmax_func=calc_minmax (it's slower of course since the initial functions have to first check if something has been assigned)
[x] compute for all timesteps
[x] use python command line lib which prints help already (it's found in many of my other python utilities)

Saturday, June 01, 2019
-----------------------------
Getting correct results now, but still lots of extraneous queries.
[x] try div by 2 instead of by 4 (and it performs far fewer queries)
[x] do full-res queries to verify results are currect
 - no spurious sample, of which 0.0 is often an indicator
 - still not 100% proof, which could be created with a synthetic dataset that has unique values for each "pixel" (like maybe its coordinates)
  ...but pretty close! and I don't feel like creating a new dataset right now.

Sunday, June 02, 2019
-----------------------------
[x] make it a class rather than using all those globals

debugging...

box/4
Level: 11
lvl: 11 box: 0 1024 16 528 0 32, largest box for field hus at lvl 11 is <32 8 1> (1024 bytes), overall region: <512 256 16>, actual box: <0 512 16 272 0 16>
  timestep: 1200
    field: hus
      hus float32 min(0.0001819604804040864) max(0.01998087391257286)

box/2
Level: 11
lvl: 11 box: 0 1024 16 528 0 32 dim: 3, largest box for field hus at lvl 11 is <64 8 1> (2048 bytes), overall region: <1024 256 32>, actual box: <0 1024 16 272 0 32>
  timestep: 1200
    field: hus
      hus float32 min(0.0) max(0.01998087391257286)

Tuesday, June 04, 2019
-----------------------------
[...] all of the above, and...
[x] test performance
[x] update visus --minmax to handle --min and --max set by user (submitted feature request)
[x] fix visus --minmax checking spurious values from non-pow2 data (filed a bug)

Wednesday, June 05, 2019
-----------------------------

class Foo:
    def __init__(self,val = 42):
        self.f(val)
    def f(self,val):
        self.val=val
        self.x=val*2
        v=val*4  #local variable of function
        if not self.valid():
           raise ValueError("%i is not The Answer!" % val)
    def g(self):
        print("val:",self.val)
        print("x:",self.x)
    def valid(self):
        return self.val == 42

Making calc_minmax into a class (IdxRange).
[] create a class inside IdxRange called Field and stop using SimpleNamespace
 - aside: just use an empty class like this in order to have a namespace:
     class Foo:
         None

Trying to make it faster...
 ~70s to execute, most spend in calc_minmax
 Simplified calc_minmax and... now down to 37s!

Thursday, June 06, 2019
-----------------------------
Time to move on... committing and sharing now.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
** It's helpful to debug by cut n' pasting things like this into an interpreter session **

. ~/bin/conda_activate.sh openvisus-1.3.57
python

# size of each level will be larger by the entire size of the previous level
# since the size of the dataset doubles at each level
for lvl in range(0,idx.getMaxResolution()+1):
    print(lvl)
    query=Query(idx,ord('r'))
    query.position=Position(box)
    query.start_resolution=lvl
    query.end_resolutions.clear()
    query.end_resolutions.append(lvl)
    idx.beginQuery(query)
    query.nsamples.toString()

res=10
query=Query(idx,ord('r'))
query.position=Position(box)
query.start_resolution=res
query.end_resolutions.clear()
query.end_resolutions.append(res)
idx.beginQuery(query)
query.canExecute()
query.nsamples.toString()
query.getByteSize()
idx.executeQuery(access,query)
buf=VisusKernelPy.Array.toNumPy(query.buffer)
buf
for v in nditer(buf):
    print(type(v))
    print(v)
    v
    foo=v[0]


from OpenVisus import *
VisusIdxPy.IdxModule.attach()
idxpath="/Users/cam/data/local/r3i1p1_3d.idx"
#idxpath="/Volumes/CAMDATA/data/climate/MIROC/MIROC4h/mon/r3i1p1_3d.idx"
#idxpath="/Users/cam/Downloads/OpenVisus-1.3.2/datasets/midx/A/visus.idx"
idx=LoadDataset(idxpath)
box=idx.getBox()
lbox=idx.getLevelBox(8)
access=idx.createAccess()
num_levels=idx.getMaxResolution()
#timesteps=idx.timesteps
#timesteps.getMin()
#timesteps.getMax()
tsrng=idx.timesteps.getRange()
tsrng.delta()
tsrng.From
tsrng.To
tsrng.step
for ts in range(int(tsrng.From),int(tsrng.To+tsrng.step),int(tsrng.step)):
    print(ts,end=' ')

# interesting, but retrieves empty space around idx box since it's pow2 larger
#res=idx.getMaxResolution()
res=12
bitmask=idx.getBitmask()
pbox=bitmask.getPow2Box()
query=Query(idx,ord('r'))
query.position=Position(pbox)
#query.start_resolution=res
query.end_resolutions.clear()
query.end_resolutions.append(res)
idx.beginQuery(query)
query.canExecute()
query.nsamples.toString()
query.getByteSize()
idx.executeQuery(access,query)
buf=VisusKernelPy.Array.toNumPy(query.buffer)

for lvl in range(0,idx.getMaxResolution()):
    print("lvl:",lvl,"box:",idx.getLevelBox(lvl).toString())

query=None
#for lvl in range(12,13):
for lvl in range(0,idx.getMaxResolution()+1):
    lbox=idx.getLevelBox(lvl)
    print("lvl:",lvl,"box:",lbox.toString())
    query=Query(idx,ord('r'))
    query.position=Position(lbox)
    query.start_resolution=lvl
    query.end_resolutions.clear()
    query.end_resolutions.append(lvl)
    idx.beginQuery(query)
    query.canExecute()
    query.nsamples.toString()
    query.getByteSize()

getLargestBox(...)
    # I wish it were this simple...
    bitmask=idx.getBitmask()
    pbox=bitmask.getPow2Box()
    box=idx.getBox()
    # adjust pbox by first position of box
    ...

def getNextLevelBox(idx,lvl,curr_box,box_size):
    lbox=idx.getLevelBox(lvl)
    idx_box=idx.getBox()  #TODO: Maybe restricting the box size by this will work
    next_box=NdBox(curr_box.p1,curr_box.p2)
    global I
    #print(indent(I)+"getNextBox(): curr_box:",curr_box.toString()+",","box_size:",box_size.toString())
    # x
    if next_box.p2[0] < idx_box.p2[0]:
    #if next_box.p2[0] < lbox.p2[0]:
        next_box.p1.set(0,     next_box.p1[0] + box_size[0])                 # increment x p1
        next_box.p2.set(0, max(next_box.p2[0] + box_size[0], idx_box.p2[0])) # increment x p2
        #print(indent(I)+"increment x, next_box:",next_box.toString())
        return next_box
    # y
    if next_box.p2[1] < idx_box.p2[1]:
    #if next_box.p2[1] < lbox.p2[1]:
        next_box.p1.set(1,     next_box.p1[1] + box_size[1])                 # increment y p1
        next_box.p2.set(1, max(next_box.p2[1] + box_size[1], idx_box.p2[1])) # increment y p2
        next_box.p1.set(0, idx_box.p1[0])                                    # wrap x p1
        next_box.p2.set(0, idx_box.p1[0] + box_size[0])                      # wrap x p2
        #print(indent(I)+"increment y, wrap x, next_box:",next_box.toString())
        return next_box
    # z
    if next_box.p2[2] < idx_box.p2[2]:
    #if next_box.p2[2] < lbox.p2[2]:
        next_box.p1.set(2,     next_box.p1[2] + box_size[2])                 # increment z p1
        next_box.p2.set(2, max(next_box.p2[2] + box_size[2], idx_box.p2[2])) # increment z p2
        next_box.p1.set(1, idx_box.p1[1])                                    # wrap y p1
        next_box.p2.set(1, idx_box.p1[1] + box_size[1])                      # wrap y p2
        next_box.p1.set(0, idx_box.p1[0])                                    # wrap x p1
        next_box.p2.set(0, idx_box.p1[0] + box_size[0])                      # wrap x p2
        #print(indent(I)+"increment z, wrap x and y, next_box:",next_box.toString())
        return next_box
    #print(indent(I)+"Done! No more boxes to read for this field at this level")
    return None

for lvl in range(0,idx.getMaxResolution()+1):
    lbox=idx.getLevelBox(lvl)
    print("lvl:",lvl,"box:",lbox.toString(),end=', ')
    query=Query(idx,ord('r'))
    query.position=Position(lbox)
    query.start_resolution=lvl
    query.end_resolutions.clear()
    query.end_resolutions.append(lvl)
    idx.beginQuery(query)
    #query.canExecute() (beginQuery already returns True/False)
    print("dims:",query.nsamples.toString(),"size:",str(query.getByteSize()))
    # now reduce size of lbox by 1/4 and try the four sub-boxes    
    quarter_lbox=NdBox(lbox.p1,lbox.middle())
    box_size=quarter_lbox.size()
    for i in range(0,4):
        print("subbox:",i,"box:",quarter_lbox.toString(),end=', ')
        query=Query(idx,ord('r'))
        query.position=Position(quarter_lbox)
        query.start_resolution=lvl
        query.end_resolutions.clear()
        query.end_resolutions.append(lvl)
        idx.beginQuery(query)
        #query.canExecute() (beginQuery already returns True/False)
        print("dims:",query.nsamples.toString(),"size:",str(query.getByteSize()))
        quarter_lbox=getNextLevelBox(idx,lvl,quarter_lbox,box_size)

TODO: if this works, then some returned boxes must be cropped


# my external drive with some climate data
(openvisus-1.3.57) cam@mercury:~/code/idx_tools/range$ find /Volumes/CAMDATA/data/climate/ -name "*\.idx" -not -name "._*"
/Volumes/CAMDATA/data/climate//BCC/bcc-csm1-1/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//BNU/BNU-ESM/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//CCCma/CanCM4/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//CSIRO-BOM/ACCESS1-0/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//IPSL/IPSL-CM5A-LR/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//IPSL/IPSL-CM5A-MR/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC-ESM/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC-ESM-CHEM/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC4h/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC4h/mon/r1i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC4h/mon/r2i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC4h/mon/r2i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC4h/mon/r3i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC4h/mon/r3i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r1i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r2i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r2i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r3i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r3i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r4i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MIROC/MIROC5/mon/r4i1p1_3d.idx
/Volumes/CAMDATA/data/climate//MOHC/HadCM3/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MPI-M/MPI-ESM-LR/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//MPI-M/MPI-ESM-P/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NASA-GISS/GISS-E2-H/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NASA-GISS/GISS-E2-R/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCAR/CCSM4/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCAR/CCSM4/mon/r2i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCAR/CCSM4/mon/r3i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCAR/CCSM4/mon/r4i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCAR/CCSM4/mon/r5i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCAR/CCSM4/mon/r6i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NCC/NorESM1-M/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NOAA-GFDL/GFDL-CM3/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NOAA-GFDL/GFDL-ESM2G/mon/r1i1p1_2d.idx
/Volumes/CAMDATA/data/climate//NSF-DOE-NCAR/CESM1-CAM5-1-FV2/mon/r1i1p1_2d.idx
